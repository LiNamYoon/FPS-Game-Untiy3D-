// 사용 기술 : Input.GetKey(KeyCode.Mouse0) / Input.GetButton / Debug.DrawRay() / Physics.Raycast() / Hit.transform.CompareTag()

using UnityEngine;
using System.Collections;

namespace Chapter1
{
    public class Shoot : MonoBehaviour
    {
        private float FireSpeed = 0.3f;
        private float NextFire;
        private RaycastHit Hit;
        private float Range = 300f; //Raycast 적용거리
        private Transform MyTransform;
        void Start()
        {
            SetObject();
        }

        void SetObject()
        {
            MyTransform = transform;
        }

        void Update()
        {
            CheckInputGetkey();
        }

        void CheckInputGetkey()
        {
            /*
             * 
             *  Input.GetKey() : 원하는 키를 입력하는 함수 
             *  사용법 : Input.GetKey(keyCode. 원하는 키입력)
             *  참조 : GetKeyDown(키 입력 시작), GetKey(키 입력 중), GetKeyUp(키 입력 멈춤)
             *  
             */

            /*
            if (Input.GetKeyDown(KeyCode.Mouse0))
            {
                Debug.Log("마우스 눌림");
            }
            // and 함수를 이용해서 입력간의 간격을 만든다.
            if (Input.GetKey(KeyCode.Mouse0) && Time.time > NextFire)
            {
                NextFire = Time.time + FireSpeed;
                Debug.Log("마우스 입력");
            }
            if (Input.GetKeyUp(KeyCode.Mouse0))
            {
                Debug.Log("마우스 땜");
            }
            */

            //------------------------------------------------------------------------------------------------------------------------------------------

            /*
             * 
             *  Input.GetButton() : 정의된 버튼을 입력하는 함수 
             *  사용법 : Input.GetKey("Input Axes에 있는 버튼이름 입력")
             *  
             */
            if (Input.GetButton("Fire1") && Time.time > NextFire)
            {
                // Debug.DrawRay() : Raycast의 보이지 않는 선을 색을 칠해서 보여주는 함수
                // 사용법 : Debug.DrawRay(시작점, 진행방향, 색, 지속시간);
                Debug.DrawRay(MyTransform.position, MyTransform.forward, Color.green, 3);
                // Physics.Raycast() : 눈에 보이지 않는 선을 만들어서 해당 선에 출돌하는 객체를 판단하는 함수
                // 사용법 : Physics.Raycast(시작점, 진행방향, out Hit, 적용거리)
                // 참조 : 먼저 RaycastHit Hit;를 지정하고 시작한다.
                if (Physics.Raycast(MyTransform.position, MyTransform.forward, out Hit, Range))
                {
                    // Hit.transform.CompareTag() : 충돌한 타겟이 무엇인지 판단하는 함수
                    // 사용법 : Hit.transform.CompareTag("타겟명") :
                    if (Hit.transform.CompareTag("Enemy"))
                    {
                        //충돌된 객체 이름 출력
                        Debug.Log("Enemy " + Hit.transform.name);
                    }
                    else
                    {
                        Debug.Log("Not Enemy");
                    }
                }
                NextFire = Time.time + FireSpeed;
                Debug.Log("마우스 입력");
            }

        }


    }
}

